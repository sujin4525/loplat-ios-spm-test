
name: Xcode - Build and Analyze

on:
  workflow_dispatch:
    inputs:
       version:
          description: 'version'     
          required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Check if version exists
        id: check_version
        run: |
          existing_tag=$(git tag --list "${{ github.event.inputs.version }}")
          if [[ -z "$existing_tag" ]]; then
            echo "::set-output name=version_exists::false"
          else
            echo "::set-output name=version_exists::true"
          fi
        continue-on-error: true

      - name: Delete existing version
        #if: steps.check_version.outputs.version_exists == 'true'
        run: |
          echo "$REPO_NAME $REPO_OWNER"
          existing_tag="${{ github.event.inputs.version }}"
          echo "$existing_tag"

          git tag -d $existing_tag
          git push origin :refs/tags/$existing_tag
          echo "Deleted existing tag: $existing_tag"
          
          #release_id=$(curl -s -H "Authorization: token $ACCESS_TOKEN" "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/releases/tags/$existing_tag" | jq -r '.id')
          release_id=$(curl -s -H "Accept: application/vnd.github+json" -H "Authorization: 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"  -H  "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/sujin4525/loplat-ios-spm-test/releases/tags/$existing_tag | jq -r '.id')

          echo "Release ID: $release_id"
          curl -L -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/sujin4525/loplat-ios-spm-test/releases/$release_id
          
      - name: Create new tag and release
        run: |
          new_version="${{ github.event.inputs.version }}"
          git tag $new_version
          git push origin $new_version
          echo "Created new tag: $new_version"
          # Create GitHub release
          token="${{ secrets.GITHUB_TOKEN }}"
          body="Release notes for $new_version"
          curl -X POST "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases" \
            -H "Authorization: token $token" \
            -d "{\"tag_name\": \"$new_version\", \"body\": \"$body\"}"
          echo "Created new release for $new_version"
